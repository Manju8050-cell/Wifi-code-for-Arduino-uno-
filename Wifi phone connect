#include <SoftwareSerial.h>

// Define the pins for SoftwareSerial
SoftwareSerial espSerial(2, 3); // RX, TX

// Define the SSID and Password for the access point
const char* ssid = "MyESP8266AP";     // Replace with your desired network name
const char* password = "password123";  // Replace with your desired password

void setup() {
  // Start the Serial Monitor
  Serial.begin(115200);
  
  // Start communication with ESP8266
  espSerial.begin(115200);

  // Reset the ESP8266
  sendCommand("AT+RST", 2000, "OK");

  // Set ESP8266 as an access point
  sendCommand("AT+CWMODE=2", 1000, "OK"); // Set to AP mode
  sendCommand("AT+CWSAP=\"" + String(ssid) + "\",\"" + String(password) + "\",5,3", 2000, "OK");

  // Start the web server
  sendCommand("AT+CIPMUX=1", 1000, "OK");
  sendCommand("AT+CIPSERVER=1,80", 1000, "OK");

  Serial.println("Setup complete. Connect to WiFi and open the browser.");
}

void loop() {
  if (espSerial.available()) {
    String data = espSerial.readString();
    if (data.indexOf("+IPD") != -1) {
      Serial.println("Data received: ");
      Serial.println(data);

      // Respond to HTTP request
      String response = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
      response += "<!DOCTYPE HTML><html><body><h1>Hello from ESP8266!</h1></body></html>";

      // Send the response to the client
      sendCommand("AT+CIPSEND=0," + String(response.length()), 1000, ">");
      espSerial.print(response);
      sendCommand("AT+CIPCLOSE=0", 1000, "OK");
    }
  }
}

// Function to send AT commands to ESP8266
void sendCommand(String command, int timeout, String response) {
  String result = "";
  espSerial.println(command);
  long int time = millis();
  while ((time + timeout) > millis()) {
    while (espSerial.available()) {
      char c = espSerial.read();
      result += c;
    }
  }
  Serial.println(result);
}
